import {Component} from 'react'
import './index.css'
import {v4 as uuidv4} from 'uuid'
import MoneyDetails from '../MoneyDetails'
import TransactionItem from '../TransactionItem'

const transactionTypeOptions = [
  {
    optionId: 'INCOME',
    displayText: 'Income',
  },
  {
    optionId: 'EXPENSES',
    displayText: 'Expenses',
  },
]

class MoneyManager extends Component {
  state = {
    title: '',
    amount: '',
    type: 'Income',
    transactionsList: [],
    balance: 0,
    income: 0,
    expenses: 0,
  }

  onTitleChange = event => {
    this.setState({title: event.target.value})
  }

  onAmountChange = event => {
    this.setState({amount: event.target.value})
  }

  onTypeChange = event => {
    this.setState({type: event.target.value})
  }

  onDelete = (id, type, amount) => {
    const {transactionsList} = this.state
    const filteredUsersData = transactionsList.filter(each => each.id !== id)
    if (type === 'Income') {
      this.setState(prevState => ({
        transactionsList: filteredUsersData,
        income: prevState.income - parseInt(amount),
        balance: prevState.balance - parseInt(amount),
      }))
    } else if (type === 'Expenses') {
      this.setState(prevState => ({
        transactionsList: filteredUsersData,
        expenses: prevState.expenses - parseInt(amount),
        balance: prevState.balance + parseInt(amount),
      }))
    }
    console.log(filteredUsersData)
  }

  onAddButton = () => {
    const {title, amount, type} = this.state
    const newTransaction = {
      id: uuidv4(),
      title,
      amount,
      type,
    }
    if (type === 'Income') {
      console.log('case 1 called')
      this.setState(prevState => ({
        transactionsList: [...prevState.transactionsList, newTransaction],
        title: '',
        amount: '',
        type: 'Income',
        balance: prevState.balance + parseInt(amount),
        income: prevState.income + parseInt(amount),
      }))
    } else if (type === 'Expenses') {
      console.log('case 2 called')
      this.setState(prevState => ({
        transactionsList: [...prevState.transactionsList, newTransaction],
        title: '',
        amount: '',
        type: 'Income',
        balance: prevState.balance - parseInt(amount),
        expenses: prevState.expenses + parseInt(amount),
      }))
    }
  }

  render() {
    const {
      title,
      amount,
      type,
      balance,
      income,
      expenses,
      transactionsList,
    } = this.state
    return (
      <div>
        <div>
          <h1>Hi Richard</h1>
          <p>Welcome back to your Money Manager</p>
          <MoneyDetails balance={balance} income={income} expenses={expenses} />
        </div>
        <div>
          <h1>Add Transaction</h1>
          <label htmlFor="title">TITLE</label>
          <input
            onChange={this.onTitleChange}
            id="title"
            type="text"
            value={title}
          />
          <label htmlFor="amount">AMOUNT</label>
          <input
            onChange={this.onAmountChange}
            id="amount"
            type="text"
            value={amount}
          />
          <label htmlFor="select">TYPE</label>
          <select id="select" onChange={this.onTypeChange} value={type}>
            {transactionTypeOptions.map(each => (
              <option>{each.displayText}</option>
            ))}
          </select>
          <button type="button" onClick={this.onAddButton}>
            Add
          </button>
          <ul>
            <h1>History</h1>
            <p>Title</p>
            <p>Amount</p>
            <p>Type</p>
            {transactionsList.map(each => (
              <TransactionItem
                key={each.key}
                onDelete={this.onDelete}
                transactionsItem={each}
              />
            ))}
          </ul>
        </div>
      </div>
    )
  }
}

export default MoneyManager
